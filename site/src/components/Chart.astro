---

---

<script>
	import Chart from "chart.js/auto";
	import Blocs from "../data/Blocs.json";

	const chartElement = document.getElementById("chart");
	let myChart;
	console.log("Test");

	if (chartElement) {
		const ctx = (chartElement as HTMLCanvasElement).getContext("2d");
		if (ctx) {
			myChart = new Chart(ctx, {
				type: "bar",
				data: {
					labels: [
						"Right",
						"Left",
						"Centre",
						"Orthodox",
						"Arab-Israel",
						"Micro",
					],
					datasets: [],
				},
				options: {
					animation: {
						duration: 600,
					},
					aspectRatio: 1.2,
					scales: {
						y: {
							stacked: true,
							beginAtZero: true,
							max: 100,
							ticks: {
								callback: (value) => `${value}%`,
							},
						},
						x: {
							stacked: true, // Enable stacking
						},
					},
					plugins: {
						title: {
							display: true,
							text: "Bloc Percentage at Polling Station",
							padding: { bottom: 20 },
						},
						legend: { display: false },
						tooltip: {
							animation: false,
							backgroundColor: "rgba(0, 0, 0, 1)",
							callbacks: {
								title: function () {
									return "";
								},
								label: function (context) {
									const partyName =
										Blocs[context.dataset.label] || "";
									const truncatedPartyName =
										partyName.length > 20
											? `${partyName.substring(0, 20)}...`
											: partyName;
									const percentage =
										context.parsed.y?.toFixed(1) || "";
									return `${truncatedPartyName}: ${percentage}%`;
								},
							},
							usePointStyle: true,
							boxPadding: 5,
							padding: 5,
						},
					},
					elements: { bar: { borderRadius: 2 } },
				},
			});
		}
	}

	// Function to darken the colour
	const darkenColor = (color, amount) =>
		color.map((value) => Math.max(value - amount, 0));

	// Function to update the chart with new data
	window.updateChartData = function (data) {
		if (myChart) {
			const blocColors = {
				Right: [59, 130, 246],
				Left: [239, 68, 68],
				"Secular Centre": [234, 179, 8],
				Orthodox: [249, 115, 22],
				"Arab-Israeli": [34, 197, 94],
				Micro: [168, 85, 247],
			};

			// Calculate total votes per bloc to determine percentages
			let grandTotalVotes = 0;
			for (const parties of Object.values(data.parties)) {
				for (const votes of Object.values(parties)) {
					grandTotalVotes += votes;
				}
			}

			// Update datasets for each party with percentage of the grand total votes
			const newDatasets = [];
			const blocOrder = [
				"Right",
				"Left",
				"Secular Centre",
				"Orthodox",
				"Arab-Israeli",
				"Micro",
			];
			blocOrder.forEach((bloc, blocIndex) => {
				// Iterate over blocs in the defined order
				const parties = data.parties[bloc];
				if (parties) {
					Object.entries(parties).forEach(
						([partyId, votes], partyIndex) => {
							const baseColor = blocColors[bloc];
							const color = darkenColor(
								baseColor,
								partyIndex * 50
							).concat(0.7);
							const percentageOfTotal =
								(Number(votes) / Number(grandTotalVotes)) * 100;

							// Find or create dataset for the party
							let dataset = myChart.data.datasets.find(
								(d) => d.label === partyId
							);
							if (!dataset) {
								// Create new dataset if it doesn't exist
								dataset = {
									label: partyId,
									data: Array(
										myChart.data.labels.length
									).fill(null),
									backgroundColor: `rgba(${color.join(",")})`,
								};
								myChart.data.datasets.push(dataset);
							}
							newDatasets.push(dataset);
							dataset.data[blocIndex] = percentageOfTotal;
						}
					);
				}
			});

			// Remove any datasets that are no longer present
			myChart.data.datasets = myChart.data.datasets.filter((dataset) =>
				newDatasets.includes(dataset)
			);
			myChart.update();
		}
	};
</script>
